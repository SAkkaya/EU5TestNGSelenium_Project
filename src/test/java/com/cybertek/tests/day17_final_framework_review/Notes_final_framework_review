Class Notes-26


What is framework ?
Test automation framework is an environment that we write and execute tests. Test automation framework uses different tools, designs in order to efficiently generate, run and report automated tests. In framework we use different packages, folders to make them more efficient,scalable,understadable etc.

java--> our framework is written in java lang.
maven--> build management tool we use for managing our dependencies and plugins, run from terminal
selenium --> we use for automate the browser
testng --> used to create tests, run tests, generate reports, building smoke/regression suites, assertions, annotations
intellij--> ide taht we used, where we write our code.
extent reports --> used to generate html report with steps, metricts, screenshots
apache poi --> read/write excel files
git/github --> version control
jenkins --> to schedule smoke/regression tests,send email to team etc.

HOW DID WE USE OOP CONCEPT IN OUR FRAMEWORK ?

Inheritance
we use base classes such as test base in our framework. this class contains the properties and methods which are common to all test classes. all test classes extend this testBase class.

Encapsulation
we have a driver class that uses private driver variable and we use the public getter method to access this.

Abstraction
we have and abstract basepage where we put the logic to common all the page object classes. my page object classes extend the base class. when we create object of the any page object, we can access the method from abstract class.

Polymorphism
we use method overloading in our framework in multiple instances.
we have overloaded utilites methods which can take different types of arguments.
sometimes we can pass webelements, or by locators.


***********************

1-Low Maintenance
    - the less you change means "you have better framework" => adapt to changes with less codes (configuration.properties)
2-Low redundancy
    - less repetition, less code (exp:TestBase=> @BeforeMethod,  @AfterMethod) - get rid of unnecessary of copiying and pasting of same codes) or Driver.get()=by Singleton priciples creating only one WebDriver object, pointing each time this object
3-Easy to scale
    - easy to write and add new test cases (reusing locator, methods, utilities (Browser utilities=> using common methods,
      with PageObject Modules, ExcelUtils etc.. you can write down new test cases easily))
4-Easy to extend
    - you need to adapt your framework to new changes
    - it is easy to add feature your framework  (easy to add new dependencies, new features and environments such as using @Dataprovider, new QA environment etc..)
5-High re-usability
    -java methods

#FeaturesOurFramework
1-Page Object Model
    1-pages
        1-BasePage
            - Template page object for all pages
    2-tests
        1-TestBase
            - Contains properties and actions common to all tests
    3-utilities
        1-Driver
            - Single WebDriver  (Singleton Concept) object for all tests
        2-Configuration.Reader
            - Read properties file
            - We have one data here. Because It is not for the DDT(Data Driven Testing). This is only if the login or
            other functions are pre-requirement for your tests.
        3-BrowserUtils
            - Browser operations,synchronization, it is not unique the project.
        4-ExcelUtility
            - Read, write excel files
        5-DBUtility
            - Access database

2-WebDriver Factory
3-Properties
4-Utilities
5-HTML Reporting


#XmlRunners
- To create TestSuit we use XmlRunners

#ExtentReport
-To report failures we use ExtentReport

#Data Driven Testing
-We are using Data Driven Framework which a framework where tests executed based on set of data.
-Framework is designed to read data from external sources like excel to csv files (with ApachePOI dependencies)
and run tests based on data. In data driven framework we can execute the same test multiple times against different
sets of data.

#TypesOfTesting
1-UI --> WebDriver
2-Backend --> JDBC
3-API --> REST - Assured

#Jenkins
    -Code is in git repository
    -Check out from git
    -Execute tests on AWS
    -Generate reports
    -Email results

 HOW DID WE USE OOP CONCEPT IN OUR FRAMEWORK ?

    Inheritance
    we use base classes such as test base in our framework. this class contains the properties and methods
    which are common to all test classes. all test classes extend this testBase class.

    Encapsulation
    we have a driver class that uses private driver variable and we use the public getter method to access this.

    Abstraction
    we have and abstract BasePage where we put the logic to common all the page object classes.
    my page object classes extend the base class. when we create object of the any page object,
    we can access the method from abstract class.

    Polymorphism
    we use method overloading in our framework in multiple instances.
    we have overloaded utilities methods which can take different types of arguments.
    sometimes we can pass WebElements, or by locators.